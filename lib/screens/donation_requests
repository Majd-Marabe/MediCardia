import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:http/http.dart' as http;
import 'package:geocoding/geocoding.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'constants.dart';

const storage = FlutterSecureStorage();

class DonationRequestsPage extends StatefulWidget {
  @override
  _DonationRequestsPageState createState() => _DonationRequestsPageState();
}

class _DonationRequestsPageState extends State<DonationRequestsPage> {
  List<dynamic> _donationRequests = [];
  double latitude = 32.22111; 
  double longitude = 35.25444; 
  String hospitalCity = ''; 
  String? userId;

  final MapController mapController = MapController(); 

  @override
  void initState() {
    super.initState();
    _fetchDonationRequests();
  }

  Future<void> _fetchDonationRequests() async {
    try {
      userId  = await storage.read(key: 'userid');
      final response = await http.get(
        Uri.parse('${ApiConstants.baseUrl}/donationrequest/getRequest/$userId'),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['donationRequests'] != null) {
          setState(() {
            _donationRequests = data['donationRequests'];
          });
        }
      } else {
        print("Failed to fetch donation requests: ${response.statusCode}");
      }
    } catch (e) {
      print("Error fetching donation requests: $e");
    }
  }

  Future<void> _getHospitalCoordinates(String hospitalName) async {
    try {
      List<Location> locations = await locationFromAddress(hospitalName);
      if (locations.isNotEmpty) {
        final double lat = locations.first.latitude;
        final double lng = locations.first.longitude;

        setState(() {
          latitude = lat;
          longitude = lng;
        });

        mapController.move(LatLng(lat, lng), 13.0);

        List<Placemark> placemarks = await placemarkFromCoordinates(lat, lng);
        if (placemarks.isNotEmpty) {
          final city = placemarks.first.locality; 
          print("City: $city");
            setState(() {
              hospitalCity = city!;
            });
          
        }
      
    }
   } catch (e) {
    print("Error: $e");
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Location not found')),
      );
    }
  }
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Blood Donation Requests'),
        backgroundColor: Color(0xff613089),
      ),
      body: _donationRequests.isEmpty
          ? const Center(child: CircularProgressIndicator())
          : ListView.builder(
              padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
              itemCount: _donationRequests.length,
              itemBuilder: (context, index) {
                final request = _donationRequests[index];
                final hospital = request['hospital'];
                final hospitalNameArabic = hospital['nameArabic'] ?? 'Unknown Hospital';
                                final hospitalName = hospital['name'] ?? 'Unknown Hospital';

_getHospitalCoordinates(hospitalNameArabic);
                return Card(
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(15),
                  ),
                  elevation: 5,
                  margin: const EdgeInsets.only(bottom: 20),
                  child: Padding(
                    padding: const EdgeInsets.all(15),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              hospitalName,
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: Color(0xff613089),
                              ),
                            ),
                            Chip(
                              label: Text(
                                request['bloodType'] ?? 'Unknown',
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              backgroundColor: Color(0xff613089),
                            ),
                          ],
                        ),
                        const SizedBox(height: 10),
                        Row(
                          children: [
                            const Icon(Icons.location_city, size: 20, color: Colors.grey),
                            const SizedBox(width: 5),
                            Text(
                              'City: ${hospital['city'] ?? 'Unknown'}',
                              style: const TextStyle(fontSize: 14, color: Colors.grey),
                            ),
                          ],
                        ),
                        const SizedBox(height: 15),
                         Row(
                          children: [
                            const Icon(Icons.water_drop, size: 20, color: Colors.grey),
                            const SizedBox(width: 5),
                            Text(
                              'Units: ${ request['units'] ?? 'Unknown'}',
                              style: const TextStyle(fontSize: 14, color: Colors.grey),
                            ),
                          ],
                        ),
                  const SizedBox(height: 15),

                         Row(
                          children: [
                            const Icon(Icons.phone, size: 20, color: Colors.grey),
                            const SizedBox(width: 5),
                            Text(
                              'Phone: ${hospital['phone'] ?? 'Unknown'}',
                              style: const TextStyle(fontSize: 14, color: Colors.grey),
                            ),
                          ],
                        ),
                        const SizedBox(height: 15),
                                 Row(
                          children: [
                            const Icon(Icons.calendar_today, size: 20, color: Colors.grey),
                            const SizedBox(width: 5),
                            Text(
                              'Date: ${ request['createdAt'] ?? 'Unknown'}',
                              style: const TextStyle(fontSize: 14, color: Colors.grey),
                            ),
                          ],
                        ),
                  const SizedBox(height: 15),

                      /*  ElevatedButton(
                          onPressed: () => _getHospitalCoordinates(hospitalNameArabic),
                          child: const Text('View Location'),
                        ),
                        const SizedBox(height: 15),*/
                        ClipRRect(
                          borderRadius: BorderRadius.circular(15),
                          child: SizedBox(
                            height: 200,
                            child: FlutterMap(
                              mapController: mapController, 
                              options: MapOptions(
                                initialCenter: LatLng(latitude, longitude),
                                initialZoom: 13.0,
                              ),
                              children: [
                                TileLayer(
                                  urlTemplate: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                                  subdomains: ['a', 'b', 'c'],
                                ),
                                MarkerLayer(
                                  markers: [
                                    Marker(
                                      point: LatLng(latitude, longitude),
                                      width: 80.0,
                                      height: 80.0,
                                      child: const Icon(
                                        Icons.location_on,
                                        color: Colors.red,
                                        size: 40,
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
    );
  }
}
